"""
The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`.
"""
directive @defer(
  """
  If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to.
  """
  label: String

  """
  Deferred when true.
  """
  if: Boolean
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`.
"""
directive @stream(
  """
  If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to.
  """
  label: String

  """
  The initial elements that shall be send down to the consumer.
  """
  initialCount: Int! = 0

  """
  Streamed when true.
  """
  if: Boolean
) on FIELD

type Query {
  movies(
    where: MovieViewFilterInput
    order: [MovieViewSortInput!]
  ): [MovieView!]!
  actors(
    where: ActorViewFilterInput
    order: [ActorViewSortInput!]
  ): [ActorView!]!
  characters(
    where: CharacterViewFilterInput
    order: [CharacterViewSortInput!]
  ): [CharacterView!]!
}

input MovieViewFilterInput {
  and: [MovieViewFilterInput!]
  or: [MovieViewFilterInput!]
  id: ComparableInt32OperationFilterInput
  title: StringOperationFilterInput
  releaseDate: ComparableDateTimeOperationFilterInput
  genre: StringOperationFilterInput
  price: ComparableDecimalOperationFilterInput
  characters: ListFilterInputTypeOfCharacterViewFilterInput
}

input MovieViewSortInput {
  id: SortEnumType
  title: SortEnumType
  releaseDate: SortEnumType
  genre: SortEnumType
  price: SortEnumType
}

input ActorViewFilterInput {
  and: [ActorViewFilterInput!]
  or: [ActorViewFilterInput!]
  id: ComparableInt32OperationFilterInput
  name: StringOperationFilterInput
  characters: ListFilterInputTypeOfCharacterViewFilterInput
}

input ActorViewSortInput {
  id: SortEnumType
  name: SortEnumType
}

input CharacterViewFilterInput {
  and: [CharacterViewFilterInput!]
  or: [CharacterViewFilterInput!]
  id: ComparableInt32OperationFilterInput
  movie: MovieViewFilterInput
  actor: ActorViewFilterInput
  characterName: StringOperationFilterInput
}

input CharacterViewSortInput {
  id: SortEnumType
  movie: MovieViewSortInput
  actor: ActorViewSortInput
  characterName: SortEnumType
}

input ComparableInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int!]
  nin: [Int!]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input ComparableDateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime!]
  nin: [DateTime!]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input ComparableDecimalOperationFilterInput {
  eq: Decimal
  neq: Decimal
  in: [Decimal!]
  nin: [Decimal!]
  gt: Decimal
  ngt: Decimal
  gte: Decimal
  ngte: Decimal
  lt: Decimal
  nlt: Decimal
  lte: Decimal
  nlte: Decimal
}

input ListFilterInputTypeOfCharacterViewFilterInput {
  all: CharacterViewFilterInput
  none: CharacterViewFilterInput
  some: CharacterViewFilterInput
  any: Boolean
}

enum SortEnumType {
  ASC
  DESC
}

type MovieView {
  id: Int!
  title: String!
  releaseDate: DateTime!
  genre: String!
  price: Decimal!
  characters(
    where: CharacterViewFilterInput
    order: [CharacterViewSortInput!]
  ): [CharacterView!]!
}

type ActorView {
  id: Int!
  name: String!
  characters(
    where: CharacterViewFilterInput
    order: [CharacterViewSortInput!]
  ): [CharacterView!]!
}

type CharacterView {
  id: Int!
  movie: MovieView!
  actor: ActorView!
  characterName: String!
}

"""
The `DateTime` scalar represents an ISO-8601 compliant date time type.
"""
scalar DateTime

"""
The built-in `Decimal` scalar type.
"""
scalar Decimal
