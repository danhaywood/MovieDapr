// <auto-generated/>
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public static partial class MovieBackendGraphqlClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::MovieClient.State.MovieBackendGraphqlClientStoreAccessor> AddMovieBackendGraphqlClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::MovieClient.State.MovieBackendGraphqlClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieClient.MoviesQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieClient.Movie_by_idQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieClient.MovieBackendGraphqlClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieClient.IMovieBackendGraphqlClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::MovieClient.State.MovieBackendGraphqlClientStoreAccessor>("MovieBackendGraphqlClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("MovieBackendGraphqlClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::MovieClient.State.MovieViewEntity, global::MovieClient.Movies_Movies_MovieView>, global::MovieClient.State.Movies_Movies_MovieViewFromMovieViewEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::MovieClient.State.CharacterViewEntity, global::MovieClient.Movies_Movies_Characters_CharacterView>, global::MovieClient.State.Movies_Movies_Characters_CharacterViewFromCharacterViewEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::MovieClient.State.MovieViewEntity, global::MovieClient.Movie_by_id_Movies_MovieView>, global::MovieClient.State.Movie_by_id_Movies_MovieViewFromMovieViewEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::MovieClient.State.CharacterViewEntity, global::MovieClient.Movie_by_id_Movies_Characters_CharacterView>, global::MovieClient.State.Movie_by_id_Movies_Characters_CharacterViewFromCharacterViewEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MovieClient.IMoviesResult>, global::MovieClient.State.MoviesResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MovieClient.IMoviesResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieClient.IMoviesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MovieClient.IMoviesResult>, global::MovieClient.State.MoviesBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MovieClient.IMoviesResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MovieClient.IMoviesResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MovieClient.IMoviesResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MovieClient.MoviesQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MovieClient.IMoviesQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieClient.MoviesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MovieClient.IMovie_by_idResult>, global::MovieClient.State.Movie_by_idResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MovieClient.IMovie_by_idResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieClient.IMovie_by_idQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MovieClient.IMovie_by_idResult>, global::MovieClient.State.Movie_by_idBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MovieClient.IMovie_by_idResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MovieClient.IMovie_by_idResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MovieClient.IMovie_by_idResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MovieClient.Movie_by_idQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MovieClient.IMovie_by_idQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieClient.Movie_by_idQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::MovieClient.State.MovieBackendGraphqlClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MovieClient.MovieBackendGraphqlClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MovieClient.IMovieBackendGraphqlClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieClient.MovieBackendGraphqlClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace MovieClient
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class MoviesResult : global::System.IEquatable<MoviesResult>, IMoviesResult
    {
        public MoviesResult(global::System.Collections.Generic.IReadOnlyList<global::MovieClient.IMovies_Movies> movies)
        {
            Movies = movies;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::MovieClient.IMovies_Movies> Movies { get; }

        public virtual global::System.Boolean Equals(MoviesResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Movies, other.Movies));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((MoviesResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Movies_elm in Movies)
                {
                    hash ^= 397 * Movies_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class Movies_Movies_MovieView : global::System.IEquatable<Movies_Movies_MovieView>, IMovies_Movies_MovieView
    {
        public Movies_Movies_MovieView(global::System.Int32 id, global::System.String title, global::System.DateTimeOffset releaseDate, global::System.String genre, global::System.Decimal price, global::System.Collections.Generic.IReadOnlyList<global::MovieClient.IMovies_Movies_Characters> characters)
        {
            Id = id;
            Title = title;
            ReleaseDate = releaseDate;
            Genre = genre;
            Price = price;
            Characters = characters;
        }

        public global::System.Int32 Id { get; }

        public global::System.String Title { get; }

        public global::System.DateTimeOffset ReleaseDate { get; }

        public global::System.String Genre { get; }

        public global::System.Decimal Price { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::MovieClient.IMovies_Movies_Characters> Characters { get; }

        public virtual global::System.Boolean Equals(Movies_Movies_MovieView? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Title.Equals(other.Title) && ReleaseDate.Equals(other.ReleaseDate) && Genre.Equals(other.Genre) && Price == other.Price && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Characters, other.Characters);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Movies_Movies_MovieView)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Title.GetHashCode();
                hash ^= 397 * ReleaseDate.GetHashCode();
                hash ^= 397 * Genre.GetHashCode();
                hash ^= 397 * Price.GetHashCode();
                foreach (var Characters_elm in Characters)
                {
                    hash ^= 397 * Characters_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class Movies_Movies_Characters_CharacterView : global::System.IEquatable<Movies_Movies_Characters_CharacterView>, IMovies_Movies_Characters_CharacterView
    {
        public Movies_Movies_Characters_CharacterView(global::System.String characterName)
        {
            CharacterName = characterName;
        }

        public global::System.String CharacterName { get; }

        public virtual global::System.Boolean Equals(Movies_Movies_Characters_CharacterView? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (CharacterName.Equals(other.CharacterName));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Movies_Movies_Characters_CharacterView)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CharacterName.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IMoviesResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::MovieClient.IMovies_Movies> Movies { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IMovies_Movies
    {
        public global::System.Int32 Id { get; }

        public global::System.String Title { get; }

        public global::System.DateTimeOffset ReleaseDate { get; }

        public global::System.String Genre { get; }

        public global::System.Decimal Price { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::MovieClient.IMovies_Movies_Characters> Characters { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IMovies_Movies_MovieView : IMovies_Movies
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IMovies_Movies_Characters
    {
        public global::System.String CharacterName { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IMovies_Movies_Characters_CharacterView : IMovies_Movies_Characters
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class Movie_by_idResult : global::System.IEquatable<Movie_by_idResult>, IMovie_by_idResult
    {
        public Movie_by_idResult(global::System.Collections.Generic.IReadOnlyList<global::MovieClient.IMovie_by_id_Movies> movies)
        {
            Movies = movies;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::MovieClient.IMovie_by_id_Movies> Movies { get; }

        public virtual global::System.Boolean Equals(Movie_by_idResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Movies, other.Movies));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Movie_by_idResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Movies_elm in Movies)
                {
                    hash ^= 397 * Movies_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class Movie_by_id_Movies_MovieView : global::System.IEquatable<Movie_by_id_Movies_MovieView>, IMovie_by_id_Movies_MovieView
    {
        public Movie_by_id_Movies_MovieView(global::System.Int32 id, global::System.String title, global::System.DateTimeOffset releaseDate, global::System.String genre, global::System.Decimal price, global::System.Collections.Generic.IReadOnlyList<global::MovieClient.IMovie_by_id_Movies_Characters> characters)
        {
            Id = id;
            Title = title;
            ReleaseDate = releaseDate;
            Genre = genre;
            Price = price;
            Characters = characters;
        }

        public global::System.Int32 Id { get; }

        public global::System.String Title { get; }

        public global::System.DateTimeOffset ReleaseDate { get; }

        public global::System.String Genre { get; }

        public global::System.Decimal Price { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::MovieClient.IMovie_by_id_Movies_Characters> Characters { get; }

        public virtual global::System.Boolean Equals(Movie_by_id_Movies_MovieView? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Title.Equals(other.Title) && ReleaseDate.Equals(other.ReleaseDate) && Genre.Equals(other.Genre) && Price == other.Price && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Characters, other.Characters);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Movie_by_id_Movies_MovieView)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Title.GetHashCode();
                hash ^= 397 * ReleaseDate.GetHashCode();
                hash ^= 397 * Genre.GetHashCode();
                hash ^= 397 * Price.GetHashCode();
                foreach (var Characters_elm in Characters)
                {
                    hash ^= 397 * Characters_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class Movie_by_id_Movies_Characters_CharacterView : global::System.IEquatable<Movie_by_id_Movies_Characters_CharacterView>, IMovie_by_id_Movies_Characters_CharacterView
    {
        public Movie_by_id_Movies_Characters_CharacterView(global::System.String characterName)
        {
            CharacterName = characterName;
        }

        public global::System.String CharacterName { get; }

        public virtual global::System.Boolean Equals(Movie_by_id_Movies_Characters_CharacterView? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (CharacterName.Equals(other.CharacterName));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Movie_by_id_Movies_Characters_CharacterView)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CharacterName.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IMovie_by_idResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::MovieClient.IMovie_by_id_Movies> Movies { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IMovie_by_id_Movies
    {
        public global::System.Int32 Id { get; }

        public global::System.String Title { get; }

        public global::System.DateTimeOffset ReleaseDate { get; }

        public global::System.String Genre { get; }

        public global::System.Decimal Price { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::MovieClient.IMovie_by_id_Movies_Characters> Characters { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IMovie_by_id_Movies_MovieView : IMovie_by_id_Movies
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IMovie_by_id_Movies_Characters
    {
        public global::System.String CharacterName { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IMovie_by_id_Movies_Characters_CharacterView : IMovie_by_id_Movies_Characters
    {
    }

    /// <summary>
    /// Represents the operation service of the Movies GraphQL operation
    /// <code>
    /// query Movies {
    ///   movies {
    ///     __typename
    ///     id
    ///     title
    ///     releaseDate
    ///     genre
    ///     price
    ///     characters {
    ///       __typename
    ///       characterName
    ///       ... on CharacterView {
    ///         id
    ///       }
    ///     }
    ///     ... on MovieView {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class MoviesQueryDocument : global::StrawberryShake.IDocument
    {
        private MoviesQueryDocument()
        {
        }

        public static MoviesQueryDocument Instance { get; } = new MoviesQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x56, 0x69, 0x65, 0x77, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "857122d3389984d273a57636c0d0f03f");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the Movies GraphQL operation
    /// <code>
    /// query Movies {
    ///   movies {
    ///     __typename
    ///     id
    ///     title
    ///     releaseDate
    ///     genre
    ///     price
    ///     characters {
    ///       __typename
    ///       characterName
    ///       ... on CharacterView {
    ///         id
    ///       }
    ///     }
    ///     ... on MovieView {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class MoviesQuery : global::MovieClient.IMoviesQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IMoviesResult> _operationExecutor;
        public MoviesQuery(global::StrawberryShake.IOperationExecutor<IMoviesResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IMoviesResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IMoviesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IMoviesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: MoviesQueryDocument.Instance.Hash.Value, name: "Movies", document: MoviesQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the Movies GraphQL operation
    /// <code>
    /// query Movies {
    ///   movies {
    ///     __typename
    ///     id
    ///     title
    ///     releaseDate
    ///     genre
    ///     price
    ///     characters {
    ///       __typename
    ///       characterName
    ///       ... on CharacterView {
    ///         id
    ///       }
    ///     }
    ///     ... on MovieView {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IMoviesQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IMoviesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IMoviesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the Movie_by_id GraphQL operation
    /// <code>
    /// query Movie_by_id($id: Int) {
    ///   movies(where: { id: { eq: $id } }) {
    ///     __typename
    ///     id
    ///     title
    ///     releaseDate
    ///     genre
    ///     price
    ///     characters {
    ///       __typename
    ///       characterName
    ///       ... on CharacterView {
    ///         id
    ///       }
    ///     }
    ///     ... on MovieView {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class Movie_by_idQueryDocument : global::StrawberryShake.IDocument
    {
        private Movie_by_idQueryDocument()
        {
        }

        public static Movie_by_idQueryDocument Instance { get; } = new Movie_by_idQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x28, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x3a, 0x20, 0x7b, 0x20, 0x65, 0x71, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x56, 0x69, 0x65, 0x77, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "fd8b5cb8816e7ec68f97b0c83688fba4");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the Movie_by_id GraphQL operation
    /// <code>
    /// query Movie_by_id($id: Int) {
    ///   movies(where: { id: { eq: $id } }) {
    ///     __typename
    ///     id
    ///     title
    ///     releaseDate
    ///     genre
    ///     price
    ///     characters {
    ///       __typename
    ///       characterName
    ///       ... on CharacterView {
    ///         id
    ///       }
    ///     }
    ///     ... on MovieView {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class Movie_by_idQuery : global::MovieClient.IMovie_by_idQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IMovie_by_idResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public Movie_by_idQuery(global::StrawberryShake.IOperationExecutor<IMovie_by_idResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IMovie_by_idResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IMovie_by_idResult>> ExecuteAsync(global::System.Int32? id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IMovie_by_idResult>> Watch(global::System.Int32? id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32? id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: Movie_by_idQueryDocument.Instance.Hash.Value, name: "Movie_by_id", document: Movie_by_idQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.Int32? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _intFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the Movie_by_id GraphQL operation
    /// <code>
    /// query Movie_by_id($id: Int) {
    ///   movies(where: { id: { eq: $id } }) {
    ///     __typename
    ///     id
    ///     title
    ///     releaseDate
    ///     genre
    ///     price
    ///     characters {
    ///       __typename
    ///       characterName
    ///       ... on CharacterView {
    ///         id
    ///       }
    ///     }
    ///     ... on MovieView {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IMovie_by_idQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IMovie_by_idResult>> ExecuteAsync(global::System.Int32? id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IMovie_by_idResult>> Watch(global::System.Int32? id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the MovieBackendGraphqlClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class MovieBackendGraphqlClient : global::MovieClient.IMovieBackendGraphqlClient
    {
        private readonly global::MovieClient.IMoviesQuery _movies;
        private readonly global::MovieClient.IMovie_by_idQuery _movie_By_Id;
        public MovieBackendGraphqlClient(global::MovieClient.IMoviesQuery movies, global::MovieClient.IMovie_by_idQuery movie_By_Id)
        {
            _movies = movies ?? throw new global::System.ArgumentNullException(nameof(movies));
            _movie_By_Id = movie_By_Id ?? throw new global::System.ArgumentNullException(nameof(movie_By_Id));
        }

        public static global::System.String ClientName => "MovieBackendGraphqlClient";
        public global::MovieClient.IMoviesQuery Movies => _movies;
        public global::MovieClient.IMovie_by_idQuery Movie_by_id => _movie_By_Id;
    }

    /// <summary>
    /// Represents the MovieBackendGraphqlClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IMovieBackendGraphqlClient
    {
        global::MovieClient.IMoviesQuery Movies { get; }

        global::MovieClient.IMovie_by_idQuery Movie_by_id { get; }
    }
}

namespace MovieClient.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class MovieViewEntity
    {
        public MovieViewEntity(global::System.Int32 id = default !, global::System.String title = default !, global::System.DateTimeOffset releaseDate = default !, global::System.String genre = default !, global::System.Decimal price = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> characters = default !)
        {
            Id = id;
            Title = title;
            ReleaseDate = releaseDate;
            Genre = genre;
            Price = price;
            Characters = characters;
        }

        public global::System.Int32 Id { get; }

        public global::System.String Title { get; }

        public global::System.DateTimeOffset ReleaseDate { get; }

        public global::System.String Genre { get; }

        public global::System.Decimal Price { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Characters { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class CharacterViewEntity
    {
        public CharacterViewEntity(global::System.String characterName = default !)
        {
            CharacterName = characterName;
        }

        public global::System.String CharacterName { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class MoviesResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::MovieClient.MoviesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::MovieClient.State.MovieViewEntity, Movies_Movies_MovieView> _movies_Movies_MovieViewFromMovieViewEntityMapper;
        public MoviesResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::MovieClient.State.MovieViewEntity, Movies_Movies_MovieView> movies_Movies_MovieViewFromMovieViewEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _movies_Movies_MovieViewFromMovieViewEntityMapper = movies_Movies_MovieViewFromMovieViewEntityMapper ?? throw new global::System.ArgumentNullException(nameof(movies_Movies_MovieViewFromMovieViewEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::MovieClient.IMoviesResult);
        public MoviesResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is MoviesResultInfo info)
            {
                return new MoviesResult(MapNonNullableIMovies_MoviesNonNullableArray(info.Movies, snapshot));
            }

            throw new global::System.ArgumentException("MoviesResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MovieClient.IMovies_Movies> MapNonNullableIMovies_MoviesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var movieViews = new global::System.Collections.Generic.List<global::MovieClient.IMovies_Movies>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                movieViews.Add(MapNonNullableIMovies_Movies(child, snapshot));
            }

            return movieViews;
        }

        private global::MovieClient.IMovies_Movies MapNonNullableIMovies_Movies(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("MovieView", global::System.StringComparison.Ordinal))
            {
                return _movies_Movies_MovieViewFromMovieViewEntityMapper.Map(snapshot.GetEntity<global::MovieClient.State.MovieViewEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class MoviesResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public MoviesResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> movies, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Movies = movies;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Movies { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new MoviesResultInfo(Movies, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class Movies_Movies_MovieViewFromMovieViewEntityMapper : global::StrawberryShake.IEntityMapper<global::MovieClient.State.MovieViewEntity, Movies_Movies_MovieView>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::MovieClient.State.CharacterViewEntity, Movies_Movies_Characters_CharacterView> _movies_Movies_Characters_CharacterViewFromCharacterViewEntityMapper;
        public Movies_Movies_MovieViewFromMovieViewEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::MovieClient.State.CharacterViewEntity, Movies_Movies_Characters_CharacterView> movies_Movies_Characters_CharacterViewFromCharacterViewEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _movies_Movies_Characters_CharacterViewFromCharacterViewEntityMapper = movies_Movies_Characters_CharacterViewFromCharacterViewEntityMapper ?? throw new global::System.ArgumentNullException(nameof(movies_Movies_Characters_CharacterViewFromCharacterViewEntityMapper));
        }

        public Movies_Movies_MovieView Map(global::MovieClient.State.MovieViewEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new Movies_Movies_MovieView(entity.Id, entity.Title, entity.ReleaseDate, entity.Genre, entity.Price, MapNonNullableIMovies_Movies_CharactersNonNullableArray(entity.Characters, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MovieClient.IMovies_Movies_Characters> MapNonNullableIMovies_Movies_CharactersNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var characterViews = new global::System.Collections.Generic.List<global::MovieClient.IMovies_Movies_Characters>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                characterViews.Add(MapNonNullableIMovies_Movies_Characters(child, snapshot));
            }

            return characterViews;
        }

        private global::MovieClient.IMovies_Movies_Characters MapNonNullableIMovies_Movies_Characters(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("CharacterView", global::System.StringComparison.Ordinal))
            {
                return _movies_Movies_Characters_CharacterViewFromCharacterViewEntityMapper.Map(snapshot.GetEntity<global::MovieClient.State.CharacterViewEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class Movies_Movies_Characters_CharacterViewFromCharacterViewEntityMapper : global::StrawberryShake.IEntityMapper<global::MovieClient.State.CharacterViewEntity, Movies_Movies_Characters_CharacterView>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public Movies_Movies_Characters_CharacterViewFromCharacterViewEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public Movies_Movies_Characters_CharacterView Map(global::MovieClient.State.CharacterViewEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new Movies_Movies_Characters_CharacterView(entity.CharacterName);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class Movie_by_idResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::MovieClient.Movie_by_idResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::MovieClient.State.MovieViewEntity, Movie_by_id_Movies_MovieView> _movie_By_Id_Movies_MovieViewFromMovieViewEntityMapper;
        public Movie_by_idResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::MovieClient.State.MovieViewEntity, Movie_by_id_Movies_MovieView> movie_By_Id_Movies_MovieViewFromMovieViewEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _movie_By_Id_Movies_MovieViewFromMovieViewEntityMapper = movie_By_Id_Movies_MovieViewFromMovieViewEntityMapper ?? throw new global::System.ArgumentNullException(nameof(movie_By_Id_Movies_MovieViewFromMovieViewEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::MovieClient.IMovie_by_idResult);
        public Movie_by_idResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is Movie_by_idResultInfo info)
            {
                return new Movie_by_idResult(MapNonNullableIMovie_by_id_MoviesNonNullableArray(info.Movies, snapshot));
            }

            throw new global::System.ArgumentException("Movie_by_idResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MovieClient.IMovie_by_id_Movies> MapNonNullableIMovie_by_id_MoviesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var movieViews = new global::System.Collections.Generic.List<global::MovieClient.IMovie_by_id_Movies>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                movieViews.Add(MapNonNullableIMovie_by_id_Movies(child, snapshot));
            }

            return movieViews;
        }

        private global::MovieClient.IMovie_by_id_Movies MapNonNullableIMovie_by_id_Movies(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("MovieView", global::System.StringComparison.Ordinal))
            {
                return _movie_By_Id_Movies_MovieViewFromMovieViewEntityMapper.Map(snapshot.GetEntity<global::MovieClient.State.MovieViewEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class Movie_by_idResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public Movie_by_idResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> movies, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Movies = movies;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Movies { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new Movie_by_idResultInfo(Movies, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class Movie_by_id_Movies_MovieViewFromMovieViewEntityMapper : global::StrawberryShake.IEntityMapper<global::MovieClient.State.MovieViewEntity, Movie_by_id_Movies_MovieView>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::MovieClient.State.CharacterViewEntity, Movie_by_id_Movies_Characters_CharacterView> _movie_By_Id_Movies_Characters_CharacterViewFromCharacterViewEntityMapper;
        public Movie_by_id_Movies_MovieViewFromMovieViewEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::MovieClient.State.CharacterViewEntity, Movie_by_id_Movies_Characters_CharacterView> movie_By_Id_Movies_Characters_CharacterViewFromCharacterViewEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _movie_By_Id_Movies_Characters_CharacterViewFromCharacterViewEntityMapper = movie_By_Id_Movies_Characters_CharacterViewFromCharacterViewEntityMapper ?? throw new global::System.ArgumentNullException(nameof(movie_By_Id_Movies_Characters_CharacterViewFromCharacterViewEntityMapper));
        }

        public Movie_by_id_Movies_MovieView Map(global::MovieClient.State.MovieViewEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new Movie_by_id_Movies_MovieView(entity.Id, entity.Title, entity.ReleaseDate, entity.Genre, entity.Price, MapNonNullableIMovie_by_id_Movies_CharactersNonNullableArray(entity.Characters, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MovieClient.IMovie_by_id_Movies_Characters> MapNonNullableIMovie_by_id_Movies_CharactersNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var characterViews = new global::System.Collections.Generic.List<global::MovieClient.IMovie_by_id_Movies_Characters>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                characterViews.Add(MapNonNullableIMovie_by_id_Movies_Characters(child, snapshot));
            }

            return characterViews;
        }

        private global::MovieClient.IMovie_by_id_Movies_Characters MapNonNullableIMovie_by_id_Movies_Characters(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("CharacterView", global::System.StringComparison.Ordinal))
            {
                return _movie_By_Id_Movies_Characters_CharacterViewFromCharacterViewEntityMapper.Map(snapshot.GetEntity<global::MovieClient.State.CharacterViewEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class Movie_by_id_Movies_Characters_CharacterViewFromCharacterViewEntityMapper : global::StrawberryShake.IEntityMapper<global::MovieClient.State.CharacterViewEntity, Movie_by_id_Movies_Characters_CharacterView>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public Movie_by_id_Movies_Characters_CharacterViewFromCharacterViewEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public Movie_by_id_Movies_Characters_CharacterView Map(global::MovieClient.State.CharacterViewEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new Movie_by_id_Movies_Characters_CharacterView(entity.CharacterName);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class MoviesBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MovieClient.IMoviesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::MovieClient.IMoviesResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        public MoviesBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::MovieClient.IMoviesResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
        }

        public global::StrawberryShake.IOperationResult<IMoviesResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IMoviesResult Result, MoviesResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IMoviesResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IMoviesResult, MoviesResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> moviesId = default !;
            _entityStore.Update(session =>
            {
                moviesId = UpdateNonNullableIMovies_MoviesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "movies"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new MoviesResultInfo(moviesId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIMovies_MoviesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var movieViews = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                movieViews.Add(UpdateNonNullableIMovies_MoviesEntity(session, child, entityIds));
            }

            return movieViews;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIMovies_MoviesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("MovieView", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::MovieClient.State.MovieViewEntity? entity))
                {
                    session.SetEntity(entityId, new global::MovieClient.State.MovieViewEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "releaseDate")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genre")), DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "price")), UpdateNonNullableIMovies_Movies_CharactersEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "characters"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::MovieClient.State.MovieViewEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "releaseDate")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genre")), DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "price")), UpdateNonNullableIMovies_Movies_CharactersEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "characters"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Decimal DeserializeNonNullableDecimal(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _decimalParser.Parse(obj.Value.GetDecimal()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIMovies_Movies_CharactersEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var characterViews = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                characterViews.Add(UpdateNonNullableIMovies_Movies_CharactersEntity(session, child, entityIds));
            }

            return characterViews;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIMovies_Movies_CharactersEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("CharacterView", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::MovieClient.State.CharacterViewEntity? entity))
                {
                    session.SetEntity(entityId, new global::MovieClient.State.CharacterViewEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "characterName"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::MovieClient.State.CharacterViewEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "characterName"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class Movie_by_idBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MovieClient.IMovie_by_idResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::MovieClient.IMovie_by_idResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        public Movie_by_idBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::MovieClient.IMovie_by_idResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
        }

        public global::StrawberryShake.IOperationResult<IMovie_by_idResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IMovie_by_idResult Result, Movie_by_idResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IMovie_by_idResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IMovie_by_idResult, Movie_by_idResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> moviesId = default !;
            _entityStore.Update(session =>
            {
                moviesId = UpdateNonNullableIMovie_by_id_MoviesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "movies"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new Movie_by_idResultInfo(moviesId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIMovie_by_id_MoviesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var movieViews = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                movieViews.Add(UpdateNonNullableIMovie_by_id_MoviesEntity(session, child, entityIds));
            }

            return movieViews;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIMovie_by_id_MoviesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("MovieView", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::MovieClient.State.MovieViewEntity? entity))
                {
                    session.SetEntity(entityId, new global::MovieClient.State.MovieViewEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "releaseDate")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genre")), DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "price")), UpdateNonNullableIMovie_by_id_Movies_CharactersEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "characters"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::MovieClient.State.MovieViewEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "releaseDate")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genre")), DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "price")), UpdateNonNullableIMovie_by_id_Movies_CharactersEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "characters"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Decimal DeserializeNonNullableDecimal(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _decimalParser.Parse(obj.Value.GetDecimal()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIMovie_by_id_Movies_CharactersEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var characterViews = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                characterViews.Add(UpdateNonNullableIMovie_by_id_Movies_CharactersEntity(session, child, entityIds));
            }

            return characterViews;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIMovie_by_id_Movies_CharactersEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("CharacterView", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::MovieClient.State.CharacterViewEntity? entity))
                {
                    session.SetEntity(entityId, new global::MovieClient.State.CharacterViewEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "characterName"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::MovieClient.State.CharacterViewEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "characterName"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class MovieBackendGraphqlClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "MovieView" => ParseMovieViewEntityId(obj, __typename),
                "CharacterView" => ParseCharacterViewEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "MovieView" => FormatMovieViewEntityId(entityId),
                "CharacterView" => FormatCharacterViewEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseMovieViewEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatMovieViewEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseCharacterViewEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatCharacterViewEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class MovieBackendGraphqlClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public MovieBackendGraphqlClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
